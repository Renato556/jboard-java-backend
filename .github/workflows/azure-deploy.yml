name: Deploy to Azure Container Apps

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
    types: [ closed ]

env:
  AZURE_CONTAINER_REGISTRY: jboardregistry
  CONTAINER_APP_NAME: jboard-java-orchestrator
  RESOURCE_GROUP: jboard-microservices
  CONTAINER_APP_ENVIRONMENT: jboard-environment
  IMAGE_NAME: jboard-java-orchestrator

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    - name: Make mvnw executable
      run: chmod +x ./mvnw

    - name: Download dependencies
      run: ./mvnw dependency:go-offline -DskipTests

    - name: Run tests
      run: ./mvnw test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64

    - name: Deploy to Azure Container Apps
      run: |
        # Check if container app exists
        if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
          echo "Container App exists, updating..."
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars \
              CRUD_URL="${{ secrets.CRUD_URL }}" \
              FRONTEND_URLS="${{ secrets.FRONTEND_URLS }}"
        else
          echo "Container App does not exist, creating..."
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --target-port 8081 \
            --ingress external \
            --env-vars \
              CRUD_URL="${{ secrets.CRUD_URL }}" \
              FRONTEND_URLS="${{ secrets.FRONTEND_URLS }}" \
            --registry-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --cpu 0.5 \
            --memory 1Gi \
            --min-replicas 1 \
            --max-replicas 5
        fi

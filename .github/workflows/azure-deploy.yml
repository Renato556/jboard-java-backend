name: Deploy to Azure Container Apps

on:
  push:
    branches: [ master, main ]

env:
  AZURE_CONTAINER_REGISTRY: jboardregistry
  CONTAINER_APP_NAME: jboard-java-orchestrator
  RESOURCE_GROUP: jboard-microservices
  CONTAINER_APP_ENVIRONMENT: jboard-environment
  IMAGE_NAME: jboard-java-orchestrator
  TARGET_PORT: 8081
  CRUD_CONTAINER_APP_NAME: jboard-go-crud
  FRONTEND_CONTAINER_APP_NAME: jboard-react-frontend
  AI_ANALYSIS_CONTAINER_APP_NAME: jboard-py-ai-skills-vs-position

jobs:
  test-and-setup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    - name: Make mvnw executable
      run: chmod +x ./mvnw

    - name: Download dependencies
      run: ./mvnw dependency:go-offline -DskipTests

    - name: Run tests
      run: ./mvnw test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test-and-setup
    if: ${{ success() }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get CRUD URL
      id: crud-url
      run: |
        CRUD_FQDN=$(az containerapp show \
          --name ${{ env.CRUD_CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        echo "Raw CRUD FQDN result: '$CRUD_FQDN'"
        
        if [ -z "$CRUD_FQDN" ] || [ "$CRUD_FQDN" = "null" ]; then
          echo "Cannot deploy orchestrator without a valid CRUD URL"
          exit 1
        else
          CRUD_URL="https://$CRUD_FQDN"
          echo "crud-url=$CRUD_URL" >> $GITHUB_OUTPUT
        fi

    - name: Get ANALYSIS URL
      id: analysis-url
      run: |
        ANALYSIS_FQDN=$(az containerapp show \
          --name ${{ env.AI_ANALYSIS_CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        echo "Raw ANALYSIS FQDN result: '$ANALYSIS_FQDN'"
        
        if [ -z "$ANALYSIS_FQDN" ] || [ "$ANALYSIS_FQDN" = "null" ]; then
          echo "Cannot deploy orchestrator without a valid ANALYSIS URL"
          exit 1
        else
          ANALYSIS_URL="https://$ANALYSIS_FQDN"
          echo "analysis-url=$ANALYSIS_URL" >> $GITHUB_OUTPUT
        fi

    - name: Get Frontend URLs
      id: frontend-urls
      run: |
        FRONTEND_FQDN=$(az containerapp show \
          --name ${{ env.FRONTEND_CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        echo "Raw Frontend FQDN result: '$FRONTEND_FQDN'"
        
        if [ -z "$FRONTEND_FQDN" ] || [ "$FRONTEND_FQDN" = "null" ]; then
          echo "Cannot deploy orchestrator without a valid Frontend URL"
          exit 1
        else
          FRONTEND_URL="https://$FRONTEND_FQDN"
          echo "frontend-urls=$FRONTEND_URL" >> $GITHUB_OUTPUT
        fi

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64

    - name: Deploy to Azure Container Apps
      id: deploy
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        containerAppEnvironment: ${{ env.CONTAINER_APP_ENVIRONMENT }}
        targetPort: ${{ env.TARGET_PORT }}
        ingress: external
        registryUrl: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        registryUsername: ${{ secrets.ACR_USERNAME }}
        registryPassword: ${{ secrets.ACR_PASSWORD }}
        environmentVariables: >
          CRUD_URL=${{ steps.crud-url.outputs.crud-url }}
          FRONTEND_URLS=${{ steps.frontend-urls.outputs.frontend-urls }}
          ANALYSIS_URL=${{ steps.analysis-url.outputs.analysis-url }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ADMIN_CREDENTIALS=${{ secrets.ADMIN_CREDENTIALS }}

    - name: Get deployment URL
      id: get-url
      run: |
        # Try to get FQDN from deploy step output first
        DEPLOY_FQDN="${{ steps.deploy.outputs.fqdn }}"
        
        if [ -n "$DEPLOY_FQDN" ] && [ "$DEPLOY_FQDN" != "null" ]; then
          echo "fqdn=$DEPLOY_FQDN" >> $GITHUB_OUTPUT
          echo "✅ Got FQDN from deploy output: $DEPLOY_FQDN"
        else
          echo "⚠️ Deploy output FQDN is empty, querying Azure directly..."
          FQDN=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          if [ -n "$FQDN" ] && [ "$FQDN" != "null" ]; then
            echo "fqdn=$FQDN" >> $GITHUB_OUTPUT
            echo "✅ Got FQDN from Azure CLI: $FQDN"
          else
            echo "fqdn=your-app-url-not-available" >> $GITHUB_OUTPUT
            echo "❌ Could not retrieve FQDN"
          fi
        fi

    - name: Deployment Summary
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "# ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your Java Orchestrator application is ready!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Access your app:** https://${{ steps.get-url.outputs.fqdn }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Quick Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- CRUD Backend: ${{ steps.crud-url.outputs.crud-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ steps.frontend-urls.outputs.frontend-urls }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "# ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The deployment encountered an error. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check which step failed
          if [ "${{ needs.test-and-setup.result }}" != "success" ]; then
            echo "🧪 **Tests/Setup Failed:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check Maven test failures" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.deploy.outcome }}" != "success" ]; then
            echo "🚀 **Deployment Failed:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check Azure credentials" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Container Registry access" >> $GITHUB_STEP_SUMMARY
            echo "- Check Container App configuration" >> $GITHUB_STEP_SUMMARY
            echo "- Verify CRUD Container App is running" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Frontend Container App is running" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔧 **Build Failed:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check Docker build logs" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Dockerfile syntax" >> $GITHUB_STEP_SUMMARY
            echo "- Check Maven build process" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the error logs in the failed step" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix the issue and push a new commit" >> $GITHUB_STEP_SUMMARY
          echo "3. The workflow will run automatically" >> $GITHUB_STEP_SUMMARY
        fi
